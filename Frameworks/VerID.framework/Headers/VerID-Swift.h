// Generated by Apple Swift version 4.0.3 (swiftlang-900.0.74.1 clang-900.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import CoreGraphics;
@import UIKit;
@import AVFoundation;
@import Foundation;
@import CoreMedia;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("VerID")
enum VerIDBearing : NSInteger;

SWIFT_CLASS("_TtC5VerID11EulerAngleF")
@interface EulerAngleF : NSObject
@property (nonatomic) float yaw;
@property (nonatomic) float pitch;
@property (nonatomic) float roll;
@property (nonatomic, readonly) enum VerIDBearing bearing;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSNumber;

SWIFT_CLASS("_TtC5VerID8FaceUtil")
@interface FaceUtil : NSObject
+ (NSNumber * _Nullable)compareTemplate:(NSArray<NSNumber *> * _Nonnull)t1 to:(NSArray<NSNumber *> * _Nonnull)t2 error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;
@class FBFace;
@class PHAsset;
@class NSError;

SWIFT_CLASS("_TtC5VerID9ImageUtil")
@interface ImageUtil : NSObject
+ (UIImage * _Nonnull)extractFaceFrom:(UIImage * _Nonnull)image andFace:(FBFace * _Nonnull)face fitIn:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
+ (void)findFaceIn:(PHAsset * _Nonnull)asset completion:(void (^ _Nonnull)(NSError * _Nullable, UIImage * _Nullable, FBFace * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC5VerID7SDKAuth")
@interface SDKAuth : NSObject
+ (NSNumber * _Nullable)authWithAPIKey:(NSString * _Nonnull)apiKey secret:(NSString * _Nonnull)secret error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (NSNumber * _Nullable)isCallHomeRequiredWithAPIKey:(NSString * _Nonnull)apiKey secret:(NSString * _Nonnull)secret error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (void)callHome:(NSString * _Nullable)errorDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol UIViewControllerTransitionCoordinator;
@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC5VerID25StillCameraViewController")
@interface StillCameraViewController : UIViewController <AVCaptureVideoDataOutputSampleBufferDelegate>
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end









enum VerIDSecurityLevel : NSInteger;
@class VerIDUser;
@class VerIDFace;

/// Provides access to essential Ver-ID functions.
SWIFT_CLASS("_TtC5VerID5VerID")
@interface VerID : NSObject
/// Shared instance of Ver-ID
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VerID * _Nonnull shared;)
+ (VerID * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) NSError * _Nullable loadError;
/// Load Ver-ID and its resources and authenticate the client app.
/// note:
/// Itâ€™s best practice to set the API secret in your Info.plist file and leave the <code>apiSecret</code> parameter <code>nil</code>.
/// seealso:
/// <code>unload()</code>
/// \param apiSecret Ver-ID API secret. Overrides API secret set in your Info.plist file.
///
/// \param callback Block to be executed when Ver-ID is loaded. The blockâ€™s error parameter will not be nil if the client app authentication fails.
///
- (void)load:(NSString * _Nullable)apiSecret callback:(void (^ _Nullable)(BOOL, NSError * _Nullable))callback;
/// Unload Ver-ID. Unload Ver-ID and release its resources. You must call <code>load()</code> or <code>loadAsync(_:)</code> again prior to calling any Ver-ID methods.
/// seealso:
/// <code>load(_:callback:)</code>
- (void)unload;
/// Determine whether Ver-ID has been loaded.
/// <code>true</code> if Ver-ID has been loaded and is ready to use.
/// seealso:
/// <code>load(_:callback:)</code>
@property (nonatomic, readonly) BOOL isLoaded;
/// Authentication security level. Choose higher levels for stricter authentication or lower levels to be more forgiving.
/// seealso:
/// <code>VerIDSecurityLevel</code>
@property (nonatomic) enum VerIDSecurityLevel securityLevel;
/// List of registered Ver-ID users.
///
/// returns:
/// registered users
- (NSArray<VerIDUser *> * _Nullable)registeredVerIDUsersAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Compare two faces to each other
/// \param face1 First face to compare to second face
///
/// \param face2 Second face to compare to first face
///
///
/// throws:
/// Exception if the call fails
///
/// returns:
/// NSNumber with a floating point integer comparison score ranging between 0 (different) and 1 (same)
- (NSNumber * _Nullable)compareFace:(VerIDFace * _Nonnull)face1 to:(VerIDFace * _Nonnull)face2 error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Compare two faces to each other
/// \param face1 First face to compare to second face
///
/// \param face2 Second face to compare to first face
///
/// \param callback Callback that returns either a NSNumber with a floating point integer comparison score ranging between 0 (different) and 1 (same) or error if the call fails
///
- (void)compareFace:(VerIDFace * _Nonnull)face1 to:(VerIDFace * _Nonnull)face2 callback:(void (^ _Nonnull)(NSNumber * _Nullable, NSError * _Nullable))callback;
- (NSNumber * _Nullable)compareFaceTemplate:(NSArray<NSNumber *> * _Nonnull)template1 to:(NSArray<NSNumber *> * _Nonnull)template2 error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (VerIDFace * _Nullable)faceInImage:(CGImageRef _Nonnull)image error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Deregister the user and delete the associated account. Subsequent attempts to authenticate as this user will fail.
/// \param userId The user to deregister
///
- (void)deregisterUser:(NSString * _Nonnull)userId callback:(void (^ _Nullable)(NSError * _Nullable))callback;
/// Get a profile picture for a user with the given id. This is one of the images captured when the user registers.
/// \param userId the user id
///
///
/// returns:
/// an image that can be used as a profile picture or nil if the picture or the user is unavailable
- (UIImage * _Nullable)userProfilePicture:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (NSURL * _Nullable)profilePictureURLWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// Detect faces in the supplied UIImage. The function will return right away and run the callback block when the detection completes. Itâ€™s safe to call on the main queue.
/// \param image The image in which to detect faces
///
/// \param keepForRecognition Set to <code>false</code> unless you are planning to use the face for operations that require face recognition like registration or authentication.
///
/// \param strictBearingMatching Set to <code>true</code> if you anticipate using the face for face recognition where the face must match the bearing of the registered face. This is used for example in sessions that use <code>strict</code> liveness detection level.
///
/// \param callback The block to execute when the face detection completes
///
- (void)detectFaceInImage:(UIImage * _Nonnull)image keepForRecognition:(BOOL)keepForRecognition withStrictBearingMatching:(BOOL)strictBearingMatching callback:(void (^ _Nonnull)(VerIDFace * _Nullable))callback;
/// Detect faces in the supplied UIImage. The function will block until the detection completes. Should be called on a background queue.
/// \param image The image in which to detect faces
///
/// \param keepForRecognition Set to <code>false</code> unless you are planning to use the face for operations that require face recognition like registration or authentication.
///
/// \param strictBearingMatching Set to <code>true</code> if you anticipate using the face for face recognition where the face must match the bearing of the registered face. This is used for example in sessions that use <code>strict</code> liveness detection level.
///
///
/// throws:
/// Error if a face cannot be found in the image
///
/// returns:
/// Detected face
- (VerIDFace * _Nullable)detectFaceInImage:(UIImage * _Nonnull)image keepForRecognition:(BOOL)keepForRecognition withStrictBearingMatching:(BOOL)strictBearingMatching error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

/// Anti-spoofing methods
typedef SWIFT_ENUM(NSInteger, VerIDAntiSpoofingMethod) {
  VerIDAntiSpoofingMethodBearing = 0,
};

@class VerIDSessionSettings;
@protocol VerIDSessionDelegate;

/// Base class for Ver-ID sessions
SWIFT_CLASS("_TtC5VerID12VerIDSession")
@interface VerIDSession : NSObject
/// Settings for the session. The settings can only be set at initialization. The individual setting values can be modified before the session starts.
@property (nonatomic, readonly, strong) VerIDSessionSettings * _Nonnull settings;
/// The session delegate that receives the outcome of the session and its individual face detection results.
@property (nonatomic, weak) id <VerIDSessionDelegate> _Nullable delegate;
/// Session identifier. Useful if you have a single delegate handling multiple sessions and you need to distinguish between them.
@property (nonatomic, readonly) NSInteger identifier;
/// Session initializer.
/// \param settings Session settings. May only be set at initialization.
///
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Start the session.
- (void)start;
/// Cancel (stop) the session. <code>session(_:didFinishWithOutcome:)</code> will be called on your delegate with the outcome value set to <code>.cancel</code>.
- (void)cancel;
@end

/// Describes the outcome of the session
typedef SWIFT_ENUM(NSInteger, Outcome) {
/// The session finished successfully
  OutcomeSuccess = 0,
/// The session didnâ€™t receive enough positive results to make a decision and it timed out
  OutcomeFailNumberOfResults = 1,
/// The session failed
  OutcomeUnknownFailure = 2,
/// The session was cancelled
  OutcomeCancel = 3,
/// The session failed to ascertain that the received images were of genuine user in front of the camera
  OutcomeFailAntiSpoofingChallenge = 4,
/// The session outcome is inconclusive because itâ€™s still waiting for more images
  OutcomeWaiting = 5,
/// The session failed because Ver-ID is not loaded
  OutcomeFailNotLoaded = 6,
/// One of the detection/recognition library calls returned an error
  OutcomeDetRecLibFailure = 7,
};

@class VerIDAuthenticationSessionSettings;

/// Use to launch authentication sessions
SWIFT_CLASS("_TtC5VerID26VerIDAuthenticationSession")
@interface VerIDAuthenticationSession : VerIDSession
/// Authentication session initializer
/// \param settings The settings for the session or <code>nil</code> to use default
///
- (nonnull instancetype)initWithSettings:(VerIDAuthenticationSessionSettings * _Nullable)settings OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Settings common to registration, authentication and liveness detection sessions
SWIFT_CLASS("_TtC5VerID20VerIDSessionSettings")
@interface VerIDSessionSettings : NSObject
/// True to show a guide to the user before the session begins
@property (nonatomic) BOOL showGuide;
/// True to show the result of the session to the user
@property (nonatomic) BOOL showResult;
/// Number of successful results the session must collect before it finishes
@property (nonatomic) NSInteger numberOfResultsToCollect;
/// Time the user has to complete the session
@property (nonatomic) NSTimeInterval expiryTime;
/// Constructor
/// \param expiryTime Time the user has to complete the session
///
/// \param numberOfResultsToCollect Number of successful results the session must collect before it finishes
///
- (nonnull instancetype)initWithExpiryTime:(NSTimeInterval)expiryTime numberOfResultsToCollect:(NSInteger)numberOfResultsToCollect OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Liveness detection session settings
SWIFT_CLASS("_TtC5VerID37VerIDLivenessDetectionSessionSettings")
@interface VerIDLivenessDetectionSessionSettings : VerIDSessionSettings
/// Minimum duration of one pose segment. If the user fulfills the request before the duration elapses the session will wait before loading the next segment. This is to prevent the instructions from changing too fast.
@property (nonatomic) NSTimeInterval segmentDuration;
@property (nonatomic) BOOL includeFaceTemplatesInResult;
- (nonnull instancetype)initWithExpiryTime:(NSTimeInterval)expiryTime numberOfResultsToCollect:(NSInteger)numberOfResultsToCollect OBJC_DESIGNATED_INITIALIZER;
@end

enum VerIDLivenessDetection : NSInteger;

/// Settings for authentication sessions
SWIFT_CLASS("_TtC5VerID34VerIDAuthenticationSessionSettings")
@interface VerIDAuthenticationSessionSettings : VerIDLivenessDetectionSessionSettings
/// ID of the user to authenticate
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// Liveness detection level to employ in the session. Default is <code>.regular</code>
@property (nonatomic, readonly) enum VerIDLivenessDetection livenessDetection;
/// Constructor
/// \param userId ID of the user to authenticate
///
/// \param livenessDetection Liveness detection level to employ in the session. Default is <code>.regular</code>
///
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId livenessDetection:(enum VerIDLivenessDetection)livenessDetection OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithExpiryTime:(NSTimeInterval)expiryTime numberOfResultsToCollect:(NSInteger)numberOfResultsToCollect SWIFT_UNAVAILABLE;
@end

/// Bearing of the userâ€™s head as she/he looks at the camera
typedef SWIFT_ENUM(NSInteger, VerIDBearing) {
/// The userâ€™s head is level with the camera
  VerIDBearingStraight = 0,
/// The userâ€™s head is turned up
  VerIDBearingUp = 1,
/// The userâ€™s head is turned right and up
  VerIDBearingRightUp = 2,
/// The userâ€™s head is turned right
  VerIDBearingRight = 3,
/// The userâ€™s head is turned right and down
  VerIDBearingRightDown = 4,
/// The userâ€™s head is turned down
  VerIDBearingDown = 5,
/// The userâ€™s head is turned left and down
  VerIDBearingLeftDown = 6,
/// The userâ€™s head is turned left
  VerIDBearingLeft = 7,
/// The userâ€™s head is turned left and up
  VerIDBearingLeftUp = 8,
};


SWIFT_CLASS("_TtC5VerID17VerIDDebugSession")
@interface VerIDDebugSession : VerIDSession
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Represents a face found by Ver-ID
SWIFT_CLASS("_TtC5VerID9VerIDFace")
@interface VerIDFace : NSObject
/// The original face detected by the face detection framework
@property (nonatomic, readonly, strong) FBFace * _Nonnull fbFace;
/// Quality of the detected face ranging from <code>0.0</code> (worst quality) to <code>20.0</code> (best quality)
@property (nonatomic, readonly) float quality;
/// Bounds of the face within the original image
@property (nonatomic, readonly) CGRect bounds;
/// True if the face is being processed in the background
@property (nonatomic, readonly) BOOL processingInBackground;
/// True if the face can be used for face recognition
@property (nonatomic, readonly) BOOL suitableForRecognition;
/// An identifier for the face. This may change after processing if the face is being processed.
@property (nonatomic, readonly) NSInteger id;
/// Rotation of the face expressed as euler angle (yaw, pitch, roll)
@property (nonatomic, readonly, strong) EulerAngleF * _Nonnull rotation;
@property (nonatomic, readonly, copy, getter=template) NSArray<NSNumber *> * _Nullable template_;
/// Center of the face within the original image
@property (nonatomic) CGPoint center;
/// Bearing of the face derived from its rotation
@property (nonatomic) enum VerIDBearing bearing;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/// Liveness detection constants
typedef SWIFT_ENUM(NSInteger, VerIDLivenessDetection) {
/// No liveness detection
  VerIDLivenessDetectionNone = 0,
/// Regular liveness detection (suitable in most cases)
  VerIDLivenessDetectionRegular = 1,
/// Strict liveness detection (the user must register faces with different poses)
  VerIDLivenessDetectionStrict = 2,
};


/// Use to launch liveness detection sessions
SWIFT_CLASS("_TtC5VerID29VerIDLivenessDetectionSession")
@interface VerIDLivenessDetectionSession : VerIDSession
/// Liveness detection session initializer
/// \param settings The settings for the session or <code>nil</code> to use default
///
- (nonnull instancetype)initWithSettings:(VerIDLivenessDetectionSessionSettings * _Nullable)settings OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@class VerIDRegistrationSessionSettings;

/// Use to launch registration sessions
SWIFT_CLASS("_TtC5VerID24VerIDRegistrationSession")
@interface VerIDRegistrationSession : VerIDSession
/// Registration session initializer
/// \param settings The settings for the session or <code>nil</code> to use default
///
- (nonnull instancetype)initWithSettings:(VerIDRegistrationSessionSettings * _Nullable)settings OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Settings for registration sessions
SWIFT_CLASS("_TtC5VerID32VerIDRegistrationSessionSettings")
@interface VerIDRegistrationSessionSettings : VerIDSessionSettings
/// Liveness detection level to be used at authentication. Default is [.regular].
@property (nonatomic, readonly) enum VerIDLivenessDetection livenessDetection;
/// ID of the user to register
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// False to delete the user before registering faces
@property (nonatomic) BOOL appendIfUserExists;
/// Constructor
/// \param userId ID of the user to register, UUID will be generated if nil
///
/// \param livenessDetection The level of liveness detection that will be available at authentication. The default is <code>.regular</code>
///
/// \param showGuide True to show a guide to the user before the registration
///
/// \param showResult True to show the result of the session to the user
///
- (nonnull instancetype)initWithUserId:(NSString * _Nullable)userId livenessDetection:(enum VerIDLivenessDetection)livenessDetection showGuide:(BOOL)showGuide showResult:(BOOL)showResult OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithExpiryTime:(NSTimeInterval)expiryTime numberOfResultsToCollect:(NSInteger)numberOfResultsToCollect SWIFT_UNAVAILABLE;
@end

@class UIStoryboardSegue;
@class AVCaptureOutput;
@class AVCaptureConnection;

/// Base class for Ver-ID view controllers.
/// Instead of using subclasses of <code>VerIDSession</code> you may instantiate or subclass one of the subclasses of <code>VerIDViewController</code> and present them in your view controller. This gives you more control over the layout and the running of registration or authentication but itâ€™s more difficult to implement.
/// <ul>
///   <li>
///     See: <code>VerIDRegistrationViewController</code>
///     <code>VerIDAuthenticationViewController</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC5VerID19VerIDViewController")
@interface VerIDViewController : StillCameraViewController
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewWillDisappear:(BOOL)animated;
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View controller to use on user registration.
SWIFT_CLASS("_TtC5VerID31VerIDRegistrationViewController")
@interface VerIDRegistrationViewController : VerIDViewController
/// View controller initializer.
/// \param userId Identifier for the registering user. If nil a UUID will be generated by the view controller.
///
- (void)viewDidLoad;
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

/// Authentication security level settings. Higher levels mean stricter authentication. Lower levels are more forgiving.
typedef SWIFT_ENUM(NSInteger, VerIDSecurityLevel) {
/// The most relaxed security. Legitimate users should have no difficulty authenticating. May authenticate an imposter.
  VerIDSecurityLevelLowest = 0,
/// Easy authentication.
  VerIDSecurityLevelLow = 1,
/// Balance of easy authentication and high security.
  VerIDSecurityLevelNormal = 2,
/// High security.
  VerIDSecurityLevelHigh = 3,
/// Strictest security. Least likely to authenticate an imposter. Legitimate users may have difficulty authenticating.
  VerIDSecurityLevelHighest = 4,
};


@class VerIDSessionResult;

/// Delegate that receives Ver-ID session results.
SWIFT_PROTOCOL("_TtP5VerID20VerIDSessionDelegate_")
@protocol VerIDSessionDelegate
@optional
/// Deprecated: Use session:didFinishWithResult:
- (void)session:(VerIDSession * _Nonnull)session didReturnResult:(VerIDSessionResult * _Nonnull)result forImage:(UIImage * _Nullable)image andFace:(VerIDFace * _Nullable)face;
/// Deprecated: Use session:didFinishWithResult:
- (void)session:(VerIDSession * _Nonnull)session didFinishWithOutcome:(enum Outcome)outcome;
@required
/// Implement this method to listen for the result at the end of the session
/// \param session The session returning the result
///
/// \param result The result of the session
///
- (void)session:(VerIDSession * _Nonnull)session didFinishWithResult:(VerIDSessionResult * _Nonnull)result;
@end


/// Represents a result of face detection and authentication
SWIFT_CLASS("_TtC5VerID18VerIDSessionResult")
@interface VerIDSessionResult : NSObject
/// When the result was collected (time interval since 1970)
@property (nonatomic, readonly) double timestamp;
/// The outcome
@property (nonatomic, readonly) enum Outcome outcome;
/// Whether the result is positive <code>true</code> or not <code>false</code>
@property (nonatomic, readonly) BOOL positive;
/// The users identified in the faces in the result
@property (nonatomic, readonly, copy) NSArray<VerIDUser *> * _Nonnull identifiedUsers;
/// All faces collected in the session
@property (nonatomic, readonly, copy) NSArray<VerIDFace *> * _Nonnull faces;
/// Faces collected in the session that are suitable for face recognition (to be used for authentication or registration)
@property (nonatomic, readonly, copy) NSArray<VerIDFace *> * _Nonnull facesSuitableForRecognition;
/// Images collected in the session
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull images;
/// Dictionary of faces and their corresponding image URLs collected in the session
/// \param bearing Requested face bearing or nil to return all entries regardless of their face bearing
///
///
/// returns:
/// VerIDFace/URL dictionary
- (NSDictionary<VerIDFace *, NSURL *> * _Nonnull)faceImagesWithBearing:(enum VerIDBearing)bearing SWIFT_WARN_UNUSED_RESULT;
/// Dictionary of faces and their corresponding image URLs collected in the session
@property (nonatomic, readonly, copy) NSDictionary<VerIDFace *, NSURL *> * _Nonnull faceImages;
/// Faces with given bearing collected in the session
/// \param bearing Requested face bearing or nil to return all faces regardless of their bearing
///
///
/// returns:
/// Array of faces
- (NSArray<VerIDFace *> * _Nonnull)facesWithBearing:(enum VerIDBearing)bearing SWIFT_WARN_UNUSED_RESULT;
/// URLs of images with the given face bearing collected in the session
/// \param bearing Requested face bearing or nil to return all images regardless of their face bearing
///
///
/// returns:
/// Array of image URLs
- (NSArray<NSURL *> * _Nonnull)imageURLsWithBearing:(enum VerIDBearing)bearing SWIFT_WARN_UNUSED_RESULT;
/// URLs of images collected in the session
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull imageURLs;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



/// Represents a user and her/his registered bearings
SWIFT_CLASS("_TtC5VerID9VerIDUser")
@interface VerIDUser : NSObject
/// Identifier for the user
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// Array of bearings registered for this user. Consider using the set <code>bearings</code> in Swift apps.
/// -See: <code>bearings</code>
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull bearingsArray;
/// Default user ID
/// Convenience value to use if your app only has one user
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull defaultUserId;)
+ (NSString * _Nonnull)defaultUserId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



/// Delegate that receives the outcome of the Ver-ID session that runs in the Ver-ID view controller.
SWIFT_PROTOCOL("_TtP5VerID27VerIDViewControllerDelegate_")
@protocol VerIDViewControllerDelegate
/// Called when the session finishes.
/// seealso:
/// <code>VerIDSessionResult</code>
/// since:
/// 1.6
/// \param viewController the Ver-ID view controller that runs the session
///
/// \param result the result of the session
///
- (void)viewController:(VerIDViewController * _Null_unspecified)viewController didEndSessionWithResult:(VerIDSessionResult * _Nonnull)result;
@optional
/// Called after face detection finishes on a captured image.
/// since:
/// 1.6
/// \param viewController the Ver-ID view controller that runs the session
///
/// \param result the result of the face evaluation
///
/// \param image the image on which the face detection was performed
///
/// \param face the detected face or nil if no face was detected in the image
///
- (void)viewController:(VerIDViewController * _Nonnull)viewController didGenerateResult:(VerIDSessionResult * _Nonnull)result fromImage:(UIImage * _Nullable)image withDetectedFace:(VerIDFace * _Nullable)face;
@required
- (void)viewController:(VerIDViewController * _Nonnull)viewController didEndSessionWithOutcome:(enum Outcome)outcome SWIFT_UNAVAILABLE_MSG("Please see `viewController(:didEndSessionWithResult)`");
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
